/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        WinShiftDance: WinShiftDance {
            compatible = "zmk,behavior-tap-dance";
            label = "WINSHIFTDANCE";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT LWIN>, <&kp LWIN>;
        };

        LayerModTap: LayerModTap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERMODTAP";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        dash_dance: dash_dance {
            compatible = "zmk,behavior-hold-tap";
            label = "DASH_DANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&em_dash>, <&kp>;
        };
    };

    dance: dance {
        compatible = "zmk,behavior-hold-tap";
        label = "DANCE";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <0>;
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
    };

    macros {
        em_dash: em_dash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0>,
                <&macro_tap>,
                <&kp KP_N1>,
                <&macro_tap>,
                <&kp KP_N5>,
                <&macro_tap>,
                <&kp KP_N1>,
                <&macro_release>,
                <&kp LALT>;

            label = "EM_DASH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "base";
            bindings = <
&none  &kp Q         &kp W       &kp E       &kp R        &kp T              &kp Y        &kp U        &kp I       &kp O       &kp P            &none
&none  &hm LSHIFT A  &hm LGUI S  &hm LALT D  &hm LCTRL F  &kp G              &kp H        &hm RCTRL J  &hm RALT K  &hm RGUI L  &hm RSHIFT SEMI  &kp APOSTROPHE
&none  &kp Z         &kp X       &kp C       &kp V        &kp B              &kp N        &kp M        &kp COMMA   &kp DOT     &kp FSLH         &none
                                 &lt 1 TAB   &lt 2 ENTER  &lt 3 BACKSPACE    &lt 4 SPACE  &lt 1 TAB    &lt 2 DEL
            >;
        };

        f-numbers {
            label = "f-num";
            bindings = <
&trans  &kp F10  &kp F7  &kp F8  &kp F9  &none     &kp KP_PLUS   &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MULTIPLY   &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &none     &kp KP_MINUS  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_DIVIDE     &kp KP_EQUAL
&trans  &kp F12  &kp F1  &kp F2  &kp F3  &none     &kp KP_N0     &kp KP_N1  &kp KP_N2  &kp KP_N3  &mt COMMA PERIOD  &trans
                         &trans  &trans  &trans    &trans        &trans     &trans
            >;
        };

        symbolsLeft {
            label = "symL";
            bindings = <
&trans  &kp CARET               &kp AMPERSAND                  &kp ASTERISK                       &kp PERCENT                                &kp EQUAL              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &hm LSHIFT EXCLAMATION  &hm LWIN AT_SIGN               &hm LALT HASH                      &hm LCTRL DOLLAR                           &dash_dance 0 MINUS    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE               &dance RIGHT_BRACE LEFT_BRACE  &dance RIGHT_BRACKET LEFT_BRACKET  &dance RIGHT_PARENTHESIS LEFT_PARENTHESIS  &kp SQT                &trans  &trans  &trans  &trans  &trans  &trans
                                                               &trans                             &trans                                     &trans                 &trans  &trans  &trans
            >;
        };

        NavLeft {
            label = "navL";
            bindings = <
&trans  &trans  &kp LG(LC(LEFT))  &trans        &trans          &kp LG(LC(RIGHT))    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT          &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp HOME          &kp PG_UP     &kp PG_DN       &kp END              &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans        &trans          &trans               &trans  &trans  &trans
            >;
        };

        NavRight {
            label = "nav";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(LC(LEFT))  &trans     &trans     &kp LG(LC(RIGHT))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT          &kp DOWN   &kp UP     &kp RIGHT          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME          &kp PG_DN  &kp PG_UP  &kp END            &trans  &trans
                        &trans  &trans  &trans    &trans            &trans     &trans
            >;
        };

        boardLeft {
            label = "keebL";
            bindings = <
&kp CAPS  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &kp KP_NLCK  &none         &none       &none         &none  &bt BT_CLR
&none     &none          &none          &none          &none          &none            &none        &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &none  &bt BT_PRV
&none     &none          &none          &none          &none          &none            &none        &kp C_PREV    &kp C_PP    &kp C_NEXT    &none  &bt BT_NXT
                                        &none          &none          &none            &none        &trans        &trans
            >;
        };

        BoardRight {
            label = "keebR";
            bindings = <
&kp CAPS  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &kp KP_NLCK  &none         &none       &none         &none  &bt BT_CLR
&none     &none          &none          &none          &none          &none            &none        &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &none  &bt BT_PRV
&none     &none          &none          &none          &none          &none            &none        &kp C_PREV    &kp C_PP    &kp C_NEXT    &none  &bt BT_NXT
                                        &none          &none          &none            &none        &none         &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        keeb {
            if-layers = <2 1>;
            then-layer = <6>;
        };
    };
};
