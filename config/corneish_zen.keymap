/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        WinShiftDance: WinShiftDance {
            compatible = "zmk,behavior-tap-dance";
            label = "WINSHIFTDANCE";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT LWIN>, <&kp LWIN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "base";

            // --------------------------------------------------------------------------------
            // |  TAB  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O  |  P  | ALT  |
            // | BKSP  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L  |  ;  |  '   |
            // | DEVICE|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,   |  .  |  /  | SHFT/ENT |
            //                    | LWR | BACK| CTRL|   | ENT | SPC  | RSE  |

            bindings = <
&kp TAB         &kp Q  &kp W  &kp E       &kp R  &kp T              &kp Y        &kp U   &kp I      &kp O    &kp P     &mt RALT DELETE
&kp BACKSPACE   &kp A  &kp S  &kp D       &kp F  &kp G              &kp H        &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&WinShiftDance  &kp Z  &kp X  &kp C       &kp V  &kp B              &kp N        &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                              &kp ESCAPE  &none  &mt LCTRL ENTER    &lt 3 SPACE  &tog 2  &tog 1
            >;
        };

        f-numbers {
            label = "f-num";

            // -----------------------------------------------------------------------------------------
            // |   `  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // |      |     |     |     |     |     |   |     |     |     |     |     |      |
            // |      |     |     |     |     |     |   |     |     |     |     |     | SHFT |
            //                    | LWR | BACK| CTRL|   | ENT | SPC | RSE |

            bindings = <
&trans  &kp F10  &kp F7  &kp F8  &kp F9  &none     &kp KP_PLUS      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY   &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &none     &kp KP_MINUS     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_DIVIDE     &kp KP_EQUAL
&trans  &kp F12  &kp F1  &kp F2  &kp F3  &none     &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &mt COMMA PERIOD  &trans
                         &trans  &trans  &trans    &trans           &trans           &mo 1
            >;
        };

        symbols {
            bindings = <
&trans  &kp LS(EXCL)   &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)   &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp BACKSLASH
&trans  &kp GRAVE      &kp LS(LBRC)  &kp LBKT       &kp LS(LPAR)  &kp EQUAL        &kp MINUS       &none         &none         &none         &kp DQT       &none
&trans  &kp LS(TILDE)  &kp LS(RBRC)  &kp RBKT       &kp LS(RPAR)  &kp LS(PLUS)     &kp UNDERSCORE  &none         &none         &none         &none         &trans
                                     &trans         &trans        &trans           &trans          &trans        &trans
            >;

            label = "sym";
        };

        navigation {
            label = "nav";

            // -----------------------------------------------------------------------------------------
            // | ESC  |     |     |  (  |  )  |  =  |   |     |     |     |     |     |      |
            // | DEL  |     |     |  [  |  ]  |  -  |   | LFT | DWN |  UP | RGT |     |      |
            // |      |     |     |  {  |  }  |  \  |   |     |     |     |     |     | SHFT |
            //                    | LWR | BACK| CTRL|   | ENT | SPC | RSE |

            bindings = <
&trans  &none  &none  &none             &none              &none        &kp PSCRN  &none       &none       &none         &trans        &trans
&trans  &none  &none  &kp HOME          &kp END            &kp PG_UP    &kp LEFT   &kp DOWN    &kp UP      &kp RIGHT     &kp K_MUTE    &none
&trans  &none  &none  &kp LG(LC(LEFT))  &kp LC(LG(RIGHT))  &kp PG_DN    &kp K_PP   &kp K_PREV  &kp K_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &trans
                      &trans            &trans             &trans       &trans     &trans      &none
            >;
        };

        board {
            label = "keeb";

            // -----------------------------------------------------------------------------------------
            // |      |     |     |BTCLR|BTNXT|BTNXT|   |     |     |     |     |     |      |
            // |      |     |     |     |     |     |   |     |     |     |     |     |      |
            // |      | PLAY|PREV |NEXT |VOLUP|VOLDN|   |     |     |     |     |     |      |
            //                    | LWR | BACK| CTRL|   | ENT | SPC | RSE |

            bindings = <
&none  &none  &none  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none       &none       &none         &none  &none  &none  &none  &none  &none
&none  &none  &none  &none       &none       &none         &none  &none  &none  &none  &none  &none
                     &none       &none       &none         &none  &none  &mo 1
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        keeb {
            if-layers = <2 1>;
            then-layer = <4>;
        };
    };
};
